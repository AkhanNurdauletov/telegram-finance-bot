from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from datetime import datetime

from finance_db import add_entry, get_all_entries, delete_entry, get_user_entries_with_id, update_entry
from utils import export_to_excel

router = Router()

class FinanceForm(StatesGroup):
    waiting_for_type = State()
    waiting_for_description = State()
    waiting_for_amount = State()
    waiting_for_deletion = State()

class EditEntryForm(StatesGroup):
    choosing_entry = State()
    entering_new_amount = State()
    entering_new_description = State()


keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton(text="‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìñ –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")],

    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"]))
async def add_start(message: types.Message, state: FSMContext):
    entry_type = "income" if "–¥–æ—Ö–æ–¥" in message.text else "expense"
    await state.update_data(entry_type=entry_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(FinanceForm.waiting_for_description)

@router.message(FinanceForm.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(FinanceForm.waiting_for_amount)

@router.message(FinanceForm.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    entry_type = data["entry_type"]
    description = data["description"]
    user_id = message.from_user.id

    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return

    date = datetime.now().strftime("%Y-%m-%d")
    add_entry(user_id, entry_type, amount, description, date)
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {description} ‚Äî {amount} ({'–î–æ—Ö–æ–¥' if entry_type == 'income' else '–†–∞—Å—Ö–æ–¥'})")
    await state.clear()

@router.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è")
async def history_handler(message: types.Message):
    user_id = message.from_user.id
    entries = get_all_entries(user_id)

    if not entries:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    response = "\n".join([f"{e[2]} ‚Äî {e[0]} —Ç–≥ ({e[1]})" for e in entries])
    await message.answer(f"<b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n{response}")

@router.message(F.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def export_handler(message: types.Message):
    file_path = export_to_excel(message.from_user.id)
    await message.answer_document(types.FSInputFile(file_path))

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def delete_entry_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    entries = get_all_entries(user_id)

    if not entries:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π —Å id
    text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n"
    for entry in entries[:5]:
        entry_id = entry[3] if len(entry) > 3 else "?"  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ id –Ω–µ—Ç –≤ –≤—ã–±–æ—Ä–∫–µ
        text += f"{entry_id}. {entry[2]} ‚Äî {entry[0]} —Ç–≥ ({entry[1]})\n"

    await message.answer(f"{text}\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(FinanceForm.waiting_for_deletion)


@router.message(FinanceForm.waiting_for_deletion)
async def delete_entry_confirm(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        entry_id = int(message.text)
        delete_entry(user_id, entry_id)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID {entry_id} —É–¥–∞–ª–µ–Ω–∞.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    await state.clear()


@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
async def edit_start(message: types.Message, state: FSMContext):
    entries = get_user_entries_with_id(message.from_user.id)
    if not entries:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    text += "\n".join([f"ID {e[0]} ‚Äî {e[1]}‚Ç∏ | {e[2]} | {e[3]}" for e in entries])
    await message.answer(text)
    await state.set_state(EditEntryForm.choosing_entry)

@router.message(EditEntryForm.choosing_entry)
async def choose_entry(message: types.Message, state: FSMContext):
    try:
        entry_id = int(message.text.strip())
        await state.update_data(entry_id=entry_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:")
        await state.set_state(EditEntryForm.entering_new_amount)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ (—á–∏—Å–ª–æ–º).")

@router.message(EditEntryForm.entering_new_amount)
async def enter_new_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        await state.update_data(new_amount=amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await state.set_state(EditEntryForm.entering_new_description)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

@router.message(EditEntryForm.entering_new_description)
async def enter_new_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    update_entry(data['entry_id'], data['new_amount'], message.text)
    await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()
